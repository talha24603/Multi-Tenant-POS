generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String       @id @default(cuid())
  email            String       @unique
  name             String?
  password         String
  isVerified       Boolean      @default(false)
  otp              String?
  otpExpiresAt     DateTime?
  provider         String?
  stripeCustomerId String?
  isSuperAdmin     Boolean      @default(false)
  createdAt        DateTime     @default(now())
  tenants          TenantUser[]
  Sale             Sale[]
}

model Tenant {
  id                    String       @id @default(cuid())
  name                  String
  status                String       @default("INACTIVE")
  stripeCustomerId      String?
  stripeSubscriptionId  String?
  subscriptionStatus    String?      @default("INACTIVE") // ACTIVE, PAST_DUE, CANCELED, INCOMPLETE
  subscriptionPlan      String?      // MONTHLY, YEARLY
  subscriptionEndDate   DateTime?
  address               String?
  phone                 String?
  email                 String?
  website               String?
  type                  String?      @default("tenant") // tenant, superAdmin
  logo                  String?
  description           String?
  createdAt             DateTime     @default(now())
  users                 TenantUser[]
  products              Product[]
  Customer              Customer[]
  Sale                  Sale[]
}

model TenantUser {
  id       String @id @default(cuid())
  role     String
  userId   String
  tenantId String
  status   String @default("ACTIVE")
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model Product {
  id          String     @id @default(cuid())
  name        String
  price       Float
  stock       Int
  imageUrl    String?
  description String?
  tenantId    String
  tenant      Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  saleItems   SaleItem[]
}

model Customer {
  id        String   @id @default(cuid())
  name      String
  email     String?
  phone     String?
  tenantId  String
  createdAt DateTime @default(now())
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  sales     Sale[]
}

model Sale {
  id          String     @id @default(cuid())
  total       Float
  paymentType String // e.g., "Cash", "Card"
  createdAt   DateTime   @default(now())
  tenantId    String
  tenant      Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  customerId  String?
  customer    Customer?  @relation(fields: [customerId], references: [id])
  items       SaleItem[]
}

model SaleItem {
  id        String  @id @default(cuid())
  saleId    String
  productId String
  quantity  Int
  price     Float
  sale      Sale    @relation(fields: [saleId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}
